#include<cstdio>
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

static const int SIZE = 58;

class TrieNode
{
	
public:
	TrieNode();

	TrieNode *child[SIZE];
	bool isEnd;

};

TrieNode::TrieNode()
{
	isEnd = false;
	for (int i = 0; i < SIZE; i++)
	{
		child[i] = NULL;
	}
}


class Trie
{
public:
	Trie();
	//~Trie();
	void insert(string str);
	bool patternMatch(string str);
	TrieNode *root;
private:
	
};

Trie::Trie()
{
	root = new TrieNode();
}

void Trie::insert(string str)
{
	TrieNode *temp = root;
	for (char c: str)
	{
		int index = c - 'A';
		if (temp->child[index] == NULL)
		{
			temp->child[index] = new TrieNode();
		}
		temp = temp->child[index];
	}
	temp->isEnd = true;
}

bool Trie::patternMatch(string str)
{
	TrieNode *temp = root;
	for (char c : str)
	{
		int index = c - 'A';

		if (index >= 0 && index < 26)
		{
			if (temp->child[index] == NULL)
				return false;
		}
		else
		{
			if (temp->child[index] == NULL)
				continue;
		}
		temp = temp->child[index];
	}
	return temp->isEnd;
}



class Solution {
public:
	vector<bool> camelMatch(vector<string>& queries, string pattern) {
		vector<bool>result;
		Trie trie = Trie();
		trie.insert(pattern);
		for (int i = 0; i < queries.size(); i++)
		{
			result.push_back(trie.patternMatch(queries[i]));
		}
		return result;
	}
};
