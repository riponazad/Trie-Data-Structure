#include<cstdio>
#include<iostream>
#include<vector>
#include<cmath>
using namespace std;

static const int SIZE = 2;

class TrieNode
{
	
public:
	TrieNode();

	TrieNode *child[SIZE];
	bool isEnd;

};

TrieNode::TrieNode()
{
	isEnd = false;
	for (int i = 0; i < SIZE; i++)
	{
		child[i] = NULL;
	}
}


class Trie
{
public:
	Trie();
	//~Trie();
	void insert(int num);
	int oppositeMaxNum(int num);
	//bool startsWith(string str);
	TrieNode *root;
private:
	
};

Trie::Trie()
{
	root = new TrieNode();
}

void Trie::insert(int num)
{
	TrieNode *temp = root;
	for (int i=31; i>=0; i--)
	{
		int bit = (num >> i) & 1;
		if (temp->child[bit] == NULL)
		{
			temp->child[bit] = new TrieNode();
		}
		temp = temp->child[bit];
	}
	temp->isEnd = true;
}

int Trie::oppositeMaxNum(int num)
{
	TrieNode *temp = root;
	int result = 0;
	for (int i=31; i>=0; i--)
	{
		int bit = (num >> i) & 1;
		if (temp->child[1-bit] != NULL)
		{
			result += ((1 - bit) << i);
			temp = temp->child[1 - bit];
		}
		else
		{
			result += (bit << i);
			temp = temp->child[bit];
		}
	}
	return result;
}

class Solution {
public:
	int findMaximumXOR(vector<int>& nums) {
		Trie trie = Trie();
		int result = 0;
		for (int i = 0; i < nums.size(); i++)
		{
			trie.insert(nums[i]);
		}
		for (int i = 0; i < nums.size(); i++)
		{
			result = max(result, nums[i] ^ trie.oppositeMaxNum(nums[i]));
		}
		return result;
	}
};
