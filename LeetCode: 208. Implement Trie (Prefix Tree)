#include<cstdio>
#include<iostream>
using namespace std;

class TrieNode
{
	static const int SIZE = 26;
public:
	TrieNode();

	TrieNode *child[SIZE];
	bool isEnd;
	
};

TrieNode::TrieNode()
{
	isEnd = false;
	for (int i = 0; i < SIZE; i++)
	{
		child[i] = NULL;
	}
}


class Trie
{
public:
	Trie();
	//~Trie();
	void insert(string str);
	bool search(string str);
	bool startsWith(string str);
private:
	TrieNode *root;
};

Trie::Trie()
{
	root = new TrieNode();
}

void Trie::insert(string str)
{
	TrieNode *temp = root;
	for (char c : str)
	{
		int index = c - 'a';
		if (temp->child[index] == NULL)
		{
			temp->child[index] = new TrieNode();
		}
		temp = temp->child[index];
	}
	temp->isEnd = true;
}

bool Trie::search(string str)
{
	TrieNode *temp = root;
	for (char c : str)
	{
		int index = c - 'a';
		if (temp->child[index] == NULL)
		{
			return false;
		}
		temp = temp->child[index];
	}
	if (temp != NULL && temp->isEnd == true)
		return true;
	return false;
}

bool Trie::startsWith(string str)
{
	TrieNode *temp = root;
	for (char c : str)
	{
		int index = c - 'a';
		if (temp->child[index] == NULL)
		{
			return false;
		}
		temp = temp->child[index];
	}
	return true;
}

//Driver code to check
/*
int main()
{
	Trie trie = Trie();
	trie.insert("apple");
	if (trie.search("apple"))
		cout << "yes" << endl;
	else
		cout << "No" << endl;
	trie.insert("apple");
	if (trie.search("app"))
		cout << "yes" << endl;
	else
		cout << "No" << endl;
	trie.insert("apple");
	if (trie.startsWith("app"))
		cout << "yes" << endl;
	else
		cout << "No" << endl;
	trie.insert("app");
	trie.insert("apple");
	if (trie.search("app"))
		cout << "yes" << endl;
	else
		cout << "No" << endl;
}
*/
